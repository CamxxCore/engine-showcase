class MSBuild
  def initialize(solutionFile, clrVersion = 'v3.5')
    @solutionFile = solutionFile
    frameworkDir = File.join(ENV['windir'].dup, 'Microsoft.NET', 'Framework', clrVersion)
    @msbuildExecutable = File.join(frameworkDir, 'msbuild.exe')
  end
  
  def clean(compileMode = 'Debug')
      sh "#{@msbuildExecutable} #{@solutionFile} /property:Configuration=#{compileMode} /t:Clean"
  end
  
	def compile(compileMode = 'Debug')
		sh "#{@msbuildExecutable} #{@solutionFile} /m /property:BuildInParallel=false /property:Configuration=#{compileMode} /t:Rebuild"
	end
end

namespace :build do
	desc "Cleans the solution"
	task :clean do
		begin
			MSBuild.new($solution_file).clean( $build_configuration )
		rescue Exception => e
			raise "\n\nFailed: There was an error when trying to clean the solution\n#{e}"
		end
	end
	
	desc "Builds the solution"
	task :compile do
		begin
			MSBuild.new($solution_file).compile( $build_configuration )
		rescue Exception => e
			raise "\n\nFailed: There was an error when compiling the solution\n#{e}"
		end
	end
	
	desc "Test the build output"
	task :test do
		begin
		
			tests_path = "../build/" + $build_configuration.to_s + "/bin/" + $application_name + ".Tests.exe";
			system( tests_path );
		    
		rescue Exception => e
			raise "\n\nFailed: There was an error while running tests\n#{e}"
		end
	end
end

namespace :deploy do
  task :store do
	begin
	    artifacts_path = File.join(Configuration.getBasePath, Configuration.getArtifactsPath)
		puts "Artifacts path is #{artifacts_path}"
		
	    deployment_file_path = File.join(Configuration.getBasePath, Configuration.getDeploymentFilename)
		deployment_target_path = File.join(artifacts_path, 'deployment.xml')
	    zip_path = File.join(artifacts_path, 'buildoutput.zip')
	  
	    cleanDirectory(artifacts_path)
	    Dir.mkdir(artifacts_path)
		
	    copy(deployment_file_path, artifacts_path)
		
		build_output_dir = File.join(Configuration.getBasePath, Configuration.getBuildOutputBaseDir)
	      
	    Zip::ZipFile.open(zip_path, Zip::ZipFile::CREATE) do |zipfile|
	      Find.find(build_output_dir) do |path|     
			Find.prune if Configuration.getExtensionsExcludedFromBuildOutput.include? File.extname(path)
			Find.prune if Configuration.getFilenamesExcludedFromBuildOutput.include? File.basename(path)
			
			if File.directory?(path) == false then       
				dest = path.slice(build_output_dir.length + 1, path.length - build_output_dir.length - 1)
				puts "Adding #{dest} to buildoutput.zip"
				zipfile.add(dest,path) if dest
			end
	      end
	    end
		
	rescue Exception => e
		raise "\n\nFailed: There was an error while creating the build output\n#{e}"
	end
  end
end

$build_configuration = 'Debug'
$application_name = '4ha6EW2cru'
$solution_file = $application_name + '.sln'

task :continuous_integration => [:build]#, "deploy:store"]
task :build => ["build:clean", "build:compile", "build:test"]
task :test => ["build:test"]
task :default => :build_full